{"version":3,"sources":["components/Contact/Contact.module.scss","containers/ContactsList/ContactsList.module.scss","store/AC/contactsList.js","store/constants/contactsList.js","components/Contact/Contact.js","containers/ContactsList/ContactsList.js","utils/validators.js","containers/ContactForm/ContactForm.js","store/reducers/contactsList.js","store/reducers/index.js","config/firebase.js","store/index.js","store/middlewares/serviceMiddleware.js","App.js","serviceWorker.js","index.js","containers/ContactForm/ContactForm.module.scss"],"names":["module","exports","oneContact","name","email","close","contactsWrap","contactsBlock","addNew","changeContactFormState","formData","type","payload","Contact","props","_props$contactData2","contactData","isGmail","search","react_default","a","createElement","className","styles","onClick","_props$contactData","id","history","push","editContact","ContactsList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showContacts","filteredContacts","length","map","contact","components_Contact_Contact","assign","key","addNewContact","state","handleFind","bind","assertThisInitialized","_this$props","getContacts","contactsLoaded","e","findContact","target","value","onChange","placeholder","Link","to","Component","connect","_state$contactsList","contactsList","contacts","filter","f","toLowerCase","dispatch","emailValidator","test","ContactForm","delete","deleteContact","confirm","_this$props2","_this$props2$formData","createNewContact","updateContact","_this$state","alert","handleChangeName","handleChangeEmail","setState","_this$props3","contactFormWrapper","defaultValue","buttons","buttonsCreateUser","cancel","newContact","updContact","initialState","arguments","undefined","action","GET_CONTACTS","objectSpread","CREATE_NEW_CONTACT","toConsumableArray","concat","DELETE_CONTACT","delContact","UPDATE_CONTACT","console","log","combineReducers","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","settings","timestampsInSnapshots","enhancer","applyMiddleware","store","next","dbContacts","collection","get","then","snapshot","array","forEach","doc","data","catch","error","add","docRef","_action$payload","update","createStore","reducer","App","es","BrowserRouter","basename","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72514a70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"oneContact\":\"Contact_oneContact__3oLre\",\"name\":\"Contact_name__1VE6U\",\"email\":\"Contact_email__1uT3C\",\"close\":\"Contact_close__3wTBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsWrap\":\"ContactsList_contactsWrap__3LmPC\",\"contactsBlock\":\"ContactsList_contactsBlock__1LqbO\",\"addNew\":\"ContactsList_addNew__29pxf\"};","import {\r\n    GET_CONTACTS,\r\n    CHANGE_CONTACT_FORM_STATE,\r\n    CREATE_NEW_CONTACT,\r\n    DELETE_CONTACT,\r\n    UPDATE_CONTACT,\r\n    FIND_CONTACT,\r\n} from '../constants/contactsList';\r\n\r\nexport const getContacts = () => ({ type: GET_CONTACTS });\r\nexport const changeContactFormState = formData => ({ type: CHANGE_CONTACT_FORM_STATE, payload: formData });\r\nexport const createNewContact = newContact => ({ type: CREATE_NEW_CONTACT, payload: newContact });\r\nexport const deleteContact = id => ({ type: DELETE_CONTACT, payload: id });\r\nexport const updateContact = updContact => ({ type: UPDATE_CONTACT, payload: updContact });\r\nexport const findContact = value => ({ type: FIND_CONTACT, payload: value });\r\n","export const CREATE_NEW_CONTACT = 'CREATE_NEW_CONTACT';\r\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\r\nexport const GET_CONTACTS = 'GET_CONTACTS';\r\nexport const CHANGE_CONTACT_FORM_STATE = 'CHANGE_CONTACT_FORM_STATE';\r\nexport const UPDATE_CONTACT = 'UPDATE_CONTACT';\r\nexport const FIND_CONTACT = 'FIND_CONTACT';\r\n\r\nexport const SUCCESS = '_SUCCESS';\r\nexport const FAIL = '_FAIL';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Contact.module.scss'\r\n\r\nconst editContact = (props) => {\r\n    const { contactData: { name, email, id, }} = props;\r\n    props.changeContactFormState({\r\n        type: 'edit',\r\n        name, email, id\r\n    });\r\n    props.history.push('/edit-contact');\r\n}\r\n\r\nconst Contact = (props) => {\r\n    const { contactData: { name, email }} = props;\r\n    let isGmail = null;\r\n    if(email.search('gmail')!==-1){\r\n        isGmail = '(gmail account)'\r\n    }\r\n    return(\r\n        <div className={styles.oneContact} onClick={()=>{editContact(props)}}>\r\n            <span  className={styles.name}>{name} {isGmail}</span>\r\n            <span  className={styles.email}>{email}</span>\r\n            <div className={styles.close}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;\r\n\r\nContact.propTypes = {\r\n    contactData: PropTypes.object.isRequired,\r\n    changeContactFormState: PropTypes.func.isRequired,\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  getContacts, changeContactFormState, findContact, } from '../../store/AC/contactsList';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactsList.module.scss'\r\nimport Contact from '../../components/Contact/Contact';\r\nimport { Link, } from 'react-router-dom';\r\n\r\nclass ContactsList extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.handleFind = this.handleFind.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { getContacts, contactsLoaded, } = this.props;\r\n        if(!contactsLoaded){\r\n            getContacts();\r\n        }\r\n    }\r\n\r\n    showContacts = () => {\r\n        const { filteredContacts, } = this.props;\r\n        if(!filteredContacts) return;\r\n        if(filteredContacts.length === 0){\r\n            return <p> No contacts ...</p>\r\n        } else {\r\n            return filteredContacts.map(contact=><Contact key={contact.id} contactData={contact} {...this.props} />)\r\n        }\r\n    }\r\n\r\n    addNewContact = () => {\r\n        this.props.changeContactFormState({\r\n            type:'addNew',\r\n            name: '',\r\n            email: '',\r\n        });\r\n    }\r\n\r\n    handleFind(e){\r\n        this.props.findContact(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className={styles.contactsWrap} >\r\n            <h1>My address Book</h1>\r\n            <input \r\n                type=\"text\"\r\n                onChange={this.handleFind} \r\n                placeholder='Search...'/>\r\n            {this.showContacts()}\r\n            <Link to='/create-contact'>\r\n                <div className={styles.addNew} onClick={this.addNewContact}>+</div>\r\n            </Link>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { contacts, contactsLoaded, findContact, } = state.contactsList;\r\n    let filteredContacts = [];\r\n    if(findContact===''){\r\n        filteredContacts = contacts;\r\n    } else {\r\n        filteredContacts = contacts.filter(contact=>{\r\n            const f = findContact;\r\n            const { name, email, } = contact;\r\n            if(name.toLowerCase().search(f)!==-1 || email.toLowerCase().search(f)!==-1){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        })\r\n    }\r\n    return {\r\n        filteredContacts, contactsLoaded, findContact,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = dispatch => (\r\n    {\r\n      getContacts: () => dispatch(getContacts()),\r\n      changeContactFormState: (formData) => dispatch(changeContactFormState(formData)),\r\n      findContact: (value) => dispatch(findContact(value)),\r\n\r\n    }\r\n  );\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n  \r\n  ContactsList.propTypes = {\r\n    getContacts: PropTypes.func.isRequired,\r\n    changeContactFormState: PropTypes.func.isRequired,\r\n    contactsLoaded: PropTypes.bool.isRequired,\r\n  };","export const emailValidator = (value) => {\r\n    const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n    return reg.test(value);\r\n };","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.scss';\r\nimport { connect, } from 'react-redux';\r\nimport { createNewContact, deleteContact, changeContactFormState, updateContact, } from '../../store/AC/contactsList'\r\nimport { emailValidator, } from '../../utils/validators';\r\nimport { Link, } from 'react-router-dom';\r\nclass ContactForm extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n        };\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeEmail = this.handleChangeEmail.bind(this);\r\n      }\r\n      \r\n    handleChangeName(e){\r\n        this.setState({\r\n            name: e.target.value\r\n        })\r\n    }\r\n    handleChangeEmail(e){\r\n        this.setState({\r\n            email: e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        const { formData, history, } = this.props;\r\n        if(formData && formData.type === null){\r\n            history.push('/')\r\n        } else {\r\n            this.setState({\r\n                name: formData.name, \r\n                email:formData.email\r\n            })\r\n        }\r\n    }\r\n    delete = () => {\r\n        const { deleteContact, formData, } = this.props;\r\n        deleteContact(formData.id);\r\n    }\r\n    confirm = () => {\r\n        const { formData: {type, id,}, createNewContact, updateContact } = this.props;\r\n        const { name, email, } = this.state;\r\n        if(!emailValidator(email)){\r\n            alert('Wrong Email!');\r\n            return;\r\n        }\r\n        if(type==='addNew'){\r\n            createNewContact({ name, email });\r\n        }\r\n        if(type==='edit'){\r\n            updateContact({ id, name, email, });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { formData, } = this.props;\r\n        if(formData && formData.type === null) return null;\r\n        const { type, } = formData;\r\n        return(\r\n            <div className={styles.contactFormWrapper}>\r\n                <h1>My Address Book / {type==='addNew' ? 'New contact' : 'Edit contact'}</h1>\r\n                <input \r\n                    type=\"text\"\r\n                    defaultValue={this.state.name} \r\n                    onChange={this.handleChangeName} \r\n                    placeholder='Name'/>\r\n                <input \r\n                    type=\"text\" \r\n                    defaultValue={this.state.email} \r\n                    onChange={this.handleChangeEmail} \r\n                    placeholder='Email'/>\r\n                \r\n                <div className={styles.buttons}>\r\n                    {type==='edit' ? \r\n                        <Link to='/'>\r\n                            <div className={styles.delete} onClick={this.delete}>Delete</div>\r\n                        </Link>\r\n                    :null}\r\n                    <div className={styles.buttonsCreateUser}>\r\n                        <Link to='/'>\r\n                            <div className={styles.cancel} onClick={this.cancel}>Cancel</div>\r\n                        </Link>\r\n                        <Link to='/'>\r\n                            <div className={styles.confirm} onClick={this.confirm}>Ok</div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}   \r\n\r\nconst mapStateToProps = (state) => {\r\n    const { formData, } = state.contactsList;\r\n    return {\r\n         formData,\r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n      createNewContact: (newContact) => dispatch(createNewContact(newContact)),\r\n      deleteContact: (id) => dispatch(deleteContact(id)),\r\n      changeContactFormState: (formData) => dispatch(changeContactFormState(formData)),\r\n      updateContact: (updContact) => dispatch(updateContact(updContact)),\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n \r\nContactForm.propTypes = {\r\n    changeContactFormState: PropTypes.func.isRequired,\r\n    createNewContact: PropTypes.func.isRequired,\r\n    updateContact: PropTypes.func.isRequired,\r\n};","import {\r\n    GET_CONTACTS,\r\n    CHANGE_CONTACT_FORM_STATE,\r\n    CREATE_NEW_CONTACT,\r\n    DELETE_CONTACT,\r\n    UPDATE_CONTACT,\r\n    FIND_CONTACT,\r\n    SUCCESS, \r\n    FAIL,\r\n} from '../constants/contactsList';\r\n\r\n \r\nconst initialState = {\r\n   contacts: [],\r\n   contactsLoaded: false,\r\n   findContact: '',\r\n   formData: {\r\n       type: null,\r\n       id: '',\r\n       name: '',\r\n       email: '',\r\n    },\r\n};\r\n\r\nconst contactsList = (state = initialState, action) => {\r\n    const { payload, type, } = action;\r\n    switch (type) {\r\n        case GET_CONTACTS+ SUCCESS:\r\n            return { \r\n                ...state,\r\n                contacts: payload,\r\n                contactsLoaded: true,\r\n            }\r\n        case CREATE_NEW_CONTACT+ SUCCESS:\r\n        return { \r\n            ...state,\r\n            contacts: [...state.contacts, payload]\r\n        }\r\n        case DELETE_CONTACT + SUCCESS:\r\n        const delContact = state.contacts.filter(contact=>contact.id!==payload)\r\n        return { \r\n            ...state,\r\n            contacts: delContact,\r\n        }\r\n        case UPDATE_CONTACT+ SUCCESS:\r\n        const updContact = state.contacts.map(contact=>{\r\n            if(contact.id!==payload.id) return contact;\r\n            return payload;\r\n        })\r\n        return { \r\n            ...state,\r\n            contacts: updContact,\r\n        }\r\n        case FIND_CONTACT:\r\n            return {\r\n                ...state,\r\n                findContact: payload.toLowerCase(),\r\n            }\r\n        case CHANGE_CONTACT_FORM_STATE:\r\n            return {\r\n                ...state,\r\n                formData: payload,\r\n            }\r\n        case DELETE_CONTACT + FAIL:\r\n        case GET_CONTACTS + FAIL:\r\n        case CREATE_NEW_CONTACT + FAIL:\r\n        case UPDATE_CONTACT+ FAIL:\r\n            console.log('ERROR', payload);\r\n\r\n        default:\r\n        return {\r\n            ...state\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport default contactsList;","import { combineReducers } from \"redux\";\r\nimport contactsList  from './contactsList'\r\n\r\nexport default combineReducers({\r\n    contactsList,\r\n});\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBLORoh4FkiuolrscEBbPN1y2dxfAG5pbk\",\r\n  authDomain: \"address-book-b79c8.firebaseapp.com\",\r\n  databaseURL: \"https://address-book-b79c8.firebaseio.com\",\r\n  projectId: \"address-book-b79c8\",\r\n  storageBucket: \"address-book-b79c8.appspot.com\",\r\n  messagingSenderId: \"958910145696\"\r\n};\r\nfirebase.initializeApp(config);\r\nfirebase.firestore().settings({ timestampsInSnapshots: true });\r\n\r\nexport default firebase \r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport reducer from './reducers'; \r\nimport serviceMiddleware from './middlewares/serviceMiddleware'\r\n \r\nconst enhancer = applyMiddleware(serviceMiddleware)\r\nconst store = createStore(reducer, {}, enhancer);\r\n\r\nexport default store;","import firebase from '../../config/firebase'\r\n\r\nexport default store => next => action => {\r\n\r\n\tconst dbContacts = firebase.firestore().collection('contacts');\r\n\tconst { type, payload, } = action;\r\n\tif(type === 'GET_CONTACTS'){\r\n \r\n\t\t\r\n\t\tdbContacts.get()\r\n\t\t.then(snapshot => {\r\n\t\t\tlet array = [];\r\n\t\t\t\r\n\t\t\tsnapshot.forEach((doc) => {\r\n\t\t\t\tarray.push(Object.assign({id:doc.id}, doc.data()));\r\n\t\t\t});\r\n\r\n\t\t\treturn next({\r\n\t\t\t\ttype: type+'_SUCCESS', \r\n\t\t\t\tpayload: array\r\n\t\t\t})\r\n\t\t\r\n\r\n\t\t})\r\n\t\t.catch(error => next(\r\n\t\t\t{\r\n\t\t\t\ttype: type+'_FAIL', \r\n\t\t\t\tpayload: error\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t} else if(action.type==='CREATE_NEW_CONTACT'){\r\n\t\t\r\n\t\tdbContacts.add({\r\n\t\tname: payload.name,\r\n\t\temail: payload.email,\r\n\t\r\n\t})\r\n\t.then(function(docRef) {\r\n\r\n\t\treturn next({\r\n\t\t\ttype: type+'_SUCCESS', \r\n\t\t\tpayload: Object.assign({}, payload, {id: docRef.id })\r\n\t\t})\r\n\t})\r\n\t.catch(function(error) {\r\n\t\treturn next({\r\n\t\t\ttype: type+'_FAIL', \r\n\t\t\tpayload: error\r\n\t\t})\r\n\t});\r\n\t} else if(action.type==='DELETE_CONTACT'){\r\n\t\t\r\n\t\tvar docRef = dbContacts.doc(action.payload);\r\n\t\tdocRef.delete().then(()=>{\t\tconsole.log('docRef', docRef); return next({\r\n\t\t\ttype: type+'_SUCCESS',\r\n\t\t\tpayload\r\n\t\t})}).catch(error=>next({\r\n\t\t\ttype: type+'_FAIL',\r\n\t\t\tpayload:error,\r\n\t\t}));\r\n\t} else if(action.type==='UPDATE_CONTACT'){\r\n\t\tconst { name, id, email} = action.payload;\r\n\t\tvar docRef = dbContacts.doc(id);\r\n\t\tdocRef.update({name,email})\r\n\t\t.then(()=>next({\r\n\t\t\ttype: type + '_SUCCESS',\r\n\t\t\tpayload\r\n\t\t})).catch(()=>next({\r\n\t\t\ttype: type+'_FAIL',\r\n\t\t\tpayload\r\n\t\t}));\r\n\r\n\r\n\t}else{\r\n\t\tnext(action)\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n//   \r\n// }\r\n\r\n\r\n\r\n\r\n// // // var docRef = db.collection('contacts').doc('K2XVxgJjvKUBJqiOeIyb');\r\n// // // docRef.delete();\r\n\r\n\r\n// // console.log('______________________---');\r\n// // console.log(firebase);\r\n// // console.log('db', db);\r\n// // // console.log('docRef', docRef);\r\n\r\n// // console.log('______________________---');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \t// const { requestPath, requestMethod, type, requestData, ...rest } = action\r\n// \t// if(!requestPath) return next(action)\r\n\r\n// \t// const SERVER_URL = 'http://localhost:3001/'\r\n// \t// next({\r\n// \t// \t...rest, type: type + REQUEST \r\n// \t// })\r\n\t\r\n//  \t// if(requestMethod==='GET'){\r\n// \t//     axios.get(`${SERVER_URL}${requestPath}`)\r\n// \t//     .then(res => { \r\n// \t//       const data = res.data;\r\n// \t//       return next({\r\n// \t//       \t...rest, \r\n// \t//       \ttype: type + SUCCESS, \r\n// \t//       \tpayload: data\r\n// \t//       })\r\n// \t//     }).catch(function (error) {  \r\n// \t//     \tconst errorMessage = error.response.data;\r\n// \t//     \treturn next({\r\n// \t//     \t\t...rest, \r\n// \t//     \t\ttype: type + FAILURE, \r\n// \t//     \t\tpayload:errorMessage\r\n// \t//     }) \r\n// \t//   \t}); \r\n//  \t// }\r\n//  \t// else if(requestMethod==='DELETE'){\r\n// \t//     axios.delete(`${SERVER_URL}${requestPath}`)\r\n// \t//     .then(res => {\r\n// \t//       return next({\r\n// \t//       \t...rest, \r\n// \t//       \ttype: type + SUCCESS, \r\n// \t//       \tpayload: requestPath\r\n// \t//       })\r\n// \t//     }).catch(function (error) {  \r\n// \t//     \tconst errorMessage = error.response.data;\r\n// \t//     \treturn next({\r\n// \t//     \t\t...rest, \r\n// \t//     \t\ttype: type + FAILURE, \r\n// \t//     \t\tpayload:errorMessage\r\n// \t//     }) \r\n// \t//   \t}); \r\n//  \t// }\r\n//  \t// else if(requestMethod==='POST'){ \r\n// \t//     axios.post(`${SERVER_URL}${requestPath}`, requestData )\r\n// \t//     .then(res => { \r\n// \t//       const data = res.data; \r\n// \t//       return next({\r\n// \t//       \t...rest, \r\n// \t//       \ttype: type + SUCCESS, \r\n// \t//       \tpayload: Object.assign( {}, data, requestData )\r\n// \t//       })\r\n// \t//     }).catch(function (error) {  \r\n// \t//     \tconst errorMessage = error.response.data;\r\n// \t//     \treturn next({\r\n// \t//     \t\t...rest, \r\n// \t//     \t\ttype: type + FAILURE, \r\n// \t//     \t\tpayload:errorMessage\r\n// \t//     }) \r\n// \t//   \t}); \r\n//  \t// }\r\n//  \t// else if(requestMethod==='PUT'){ \r\n// \t//     axios.put(`${SERVER_URL}${requestPath}`, requestData )\r\n// \t//     .then(res => { \r\n// \t//       const data = res.data; \r\n// \t//       return next({\r\n// \t//       \t...rest, \r\n// \t//       \ttype: type + SUCCESS, \r\n// \t//       \tpayload: Object.assign( {}, data, requestData )\r\n// \t//       })\r\n// \t//     }).catch(function (error) {  \r\n// \t//     \tconst errorMessage = error.response.data;\r\n// \t//     \treturn next({\r\n// \t//     \t\t...rest, \r\n// \t//     \t\ttype: type + FAILURE, \r\n// \t//     \t\tpayload:errorMessage\r\n// \t//     }) \r\n// \t//   \t}); \r\n//  \t// }\r\n//  \t// else{\r\n//  \t\t// next(action)\r\n//  \t// }\r\n// // }","import React, { Component } from 'react';\nimport ContactsList from './containers/ContactsList/ContactsList';\nimport ContactForm from './containers/ContactForm/ContactForm';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from './store'\n\nclass App extends Component {\n  render() {\n    return (    \n    <Provider store={store}>\n      <Router basename=\"/address-book-app\">\n        <div>\n          <Route exact path=\"/\" component={ContactsList} />\n          <Route path=\"/create-contact\" component={ContactForm} />\n          <Route path=\"/edit-contact\" component={ContactForm} />\n        </div>\n      </Router>\n    </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormWrapper\":\"ContactForm_contactFormWrapper__30buL\",\"buttons\":\"ContactForm_buttons__1ZR0V\",\"delete\":\"ContactForm_delete__3-miT\",\"cancel\":\"ContactForm_cancel__2nsYI\",\"confirm\":\"ContactForm_confirm__3GPZ7\",\"buttonsCreateUser\":\"ContactForm_buttonsCreateUser__dYhXm\"};"],"sourceRoot":""}